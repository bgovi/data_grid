/*
Not implemented yet.

*/

--backfill nulls
CREATE VIEW provider_effort.appointment_effort_refresh AS
    SELECT *,
        CASE WHEN aefj.updated_at >= approval_date THEN true ELSE false END is_approved


    FROM provider_effort.appointment_effort_full_join as aefj
    CROSS JOIN ( 
        SELECT CASE WHEN check_is_approved_date IS NULL THEN backup_date ELSE check_is_approved_date END approval_date
        FROM (
            SELECT MIN(check_date) FILTER (where is_approved_date = true) as check_is_approved_date, MIN(check_date) as backup_date  
            FROM provider_effort.refreshed_dates
        )
    )
    RIGHT JOIN (
        SELECT DISTINCT check_date FROM provider_effort.refreshed_dates
        ORDER BY check_date asc
        ) rx on rx.check_date = aefj.effective_date



-- SELECT
--   id, value, value_partition, first_value(value) over (partition by value_partition order by id)
-- FROM (
--   SELECT
--     id,
--     value,
--     sum(case when value is null then 0 else 1 end) over (order by id) as value_partition

--   FROM p
--   ORDER BY id ASC
-- ) as q