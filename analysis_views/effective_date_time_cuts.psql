DROP FUNCTION IF EXISTS provider_effort.appointment_effort_timecuts;
CREATE OR REPLACE FUNCTION provider_effort.appointment_effort_timecuts ()
RETURNS TABLE (
    id bigint, effective_date DATE,
    appointment_start_date DATE, appointment_end_date DATE, effective_begin_date DATE,
    effective_end_date DATE

    -- , academic numeric, veterans_affairs numeric, administration numeric,
    -- cfte numeric, cfte_time numeric, cfte_full_time numeric, time_unit_name text,
    -- appointment_id bigint, provider_id bigint, npi text, employee_number text,
    -- cpsc_code text, cpsc_name text, lcg_name text, lcg_code text, classification_name text,
    -- first_name text, last_name text, company_name text, company_code text, lob_name text, lob_code text, 
    -- department_name text, department_code text, specialty_name text, specialty_code text, 
    -- cost_center_name text, cost_center_code text, company_id text,
    -- lob_id text, department_id text, specialty_id text, cost_center_id text
)
language plpgsql
AS $$
BEGIN

RETURN QUERY
WITH date_cuts as (
    SELECT start_cut, end_cut, end_cut - start_cut as day_diff FROM 
    (
        SELECT start_cut, LEAD(start_cut, 1) OVER (  ) as end_cut 
        FROM (
            SELECT dd::date as start_cut
            FROM generate_series
                    ( '2007-02-01'::timestamp 
                    , '2020-04-01'::timestamp
                    , '1 week'::interval) dd
        ) dx 
    ) dx2
),
begin_end_dates as ( SELECT min(start_cut) as begin_date, max(start_cut) as end_date FROM date_cuts),

-- appointment_effort values with appointments filtered out based on start and end date of appointment
appointment_effort_start_end as (
    SELECT arv.* , 
    arv.effective_date as effective_begin_date, 
    (LAG(arv.effective_date, 1) OVER ( PARTITION BY appointment_id ORDER BY arv.effective_date desc ) )::date -1 as effective_end_date,
    a.start_date as appointment_start_date, a.end_date as appointment_end_date
    FROM provider_effort.appointment_effort_rv arv
    INNER JOIN provider_effort.appointments as a on a.id = arv.appointment_id 
    WHERE (
        -- https://stackoverflow.com/questions/325933/determine-whether-two-date-ranges-overlap
        (  COALESCE(a.start_date, '0001-01-01'::DATE) <= (SELECT end_date FROM begin_end_dates) )
        AND
        (  (SELECT begin_date FROM begin_end_dates) <= COALESCE(a.end_date, '9999-12-31'::DATE) )
    )
)

select x.id::bigint, x.effective_date::date,
x.appointment_start_date::date, x.appointment_end_date::date,
x.effective_begin_date::date, x.effective_end_date::date 

from appointment_effort_start_end as x;

END;$$