-- DROP FUNCTION IF EXISTS provider_effort.appointment_effort_timecuts;
-- CREATE OR REPLACE FUNCTION provider_effort.appointment_effort_timecuts ()
-- RETURNS TABLE (
--     id bigint, appointment_id bigint, effective_date DATE,
--     appointment_start_date DATE, appointment_end_date DATE, effective_begin_date DATE,
--     effective_end_date DATE, start_cut DATE, end_cut DATE, day_diff integer

--     -- , academic numeric, veterans_affairs numeric, administration numeric,
--     -- cfte numeric, cfte_time numeric, cfte_full_time numeric, time_unit_name text,
--     -- appointment_id bigint, provider_id bigint, npi text, employee_number text,
--     -- cpsc_code text, cpsc_name text, lcg_name text, lcg_code text, classification_name text,
--     -- first_name text, last_name text, company_name text, company_code text, lob_name text, lob_code text, 
--     -- department_name text, department_code text, specialty_name text, specialty_code text, 
--     -- cost_center_name text, cost_center_code text, company_id text,
--     -- lob_id text, department_id text, specialty_id text, cost_center_id text
-- )
-- language sql
-- AS $$

WITH date_cuts as (
    SELECT start_cut, end_cut -1 as end_cut, end_cut - start_cut as day_diff FROM 
    (
        SELECT start_cut, LEAD(start_cut, 1) OVER (  ) as end_cut 
        FROM (
            SELECT dd::date as start_cut
            FROM generate_series
                    ( '2020-02-01'::timestamp 
                    , '2020-04-01'::timestamp
                    , '1 week'::interval) dd
        ) dx 
    ) dx2
),
begin_end_dates as ( SELECT min(start_cut) as begin_date, max(start_cut) as end_date FROM date_cuts),

-- appointment_effort values with appointments filtered out based on start and end date of appointment
appointment_effort_start_end as (
    SELECT arv.* , 
    arv.effective_date as effective_begin_date, 
    (LAG(arv.effective_date, 1) OVER ( PARTITION BY appointment_id ORDER BY arv.effective_date desc ) )::date -1 as effective_end_date,
    a.start_date as appointment_start_date, a.end_date as appointment_end_date
    FROM provider_effort.appointment_effort_rv arv
    INNER JOIN provider_effort.appointments as a on a.id = arv.appointment_id 
    WHERE (
        -- https://stackoverflow.com/questions/325933/determine-whether-two-date-ranges-overlap
        (  COALESCE(a.start_date, '0001-01-01'::DATE) <= (SELECT end_date FROM begin_end_dates) )
        AND
        (  (SELECT begin_date FROM begin_end_dates) <= COALESCE(a.end_date, '9999-12-31'::DATE) )
    )
),
appointment_effort_cuts as (
    SELECT  x.id::bigint as appointment_effort_id,  x.appointment_id::bigint,
    x.appointment_start_date::date, x.appointment_end_date::date,
    dx.start_cut, dx.end_cut, x.effective_begin_date, x.effective_end_date,
    GREATEST(dx.start_cut, COALESCE(x.effective_begin_date::date,dx.start_cut::date) )::date as active_start,
    LEAST( dx.end_cut, COALESCE(x.effective_end_date::date, dx.end_cut::date  )::date ) active_end,
    LEAST( dx.end_cut, COALESCE(x.effective_end_date::date, dx.end_cut::date  )::date ) - GREATEST(dx.start_cut, COALESCE(x.effective_begin_date::date,dx.start_cut::date) )::date  + 1 as active_days,
    dx.end_cut - dx.start_cut + 1 as total_period_days,
    (    
        LEAST( dx.end_cut, COALESCE(x.effective_end_date::date, dx.end_cut::date  )::date ) - 
        GREATEST(dx.start_cut, COALESCE(x.effective_begin_date::date,dx.start_cut::date) )::date  + 1
    )/( dx.end_cut - dx.start_cut + 1 ) as percent_days,

    x.cfte, x.veterans_affairs, x.academic, x.administration, x.contract, cfte_time, cfte_full_time, time_unit_name,
    (x.cfte + x.veterans_affairs + x.academic + x.administration + x.contract) as full_effort,

    CASE WHEN time_unit_name = 'hours' THEN cfte_time
    ELSE cfte_time/60.0
    END cfte_time_hrs,

    CASE WHEN time_unit_name = 'hours' THEN cfte_full_time
    ELSE cfte_full_time/60.0
    END cfte_full_time_hrs,



    x.provider_id, x.npi, x.employee_number, x.company_name, x.company_code, x.lob_name, x.lob_code,
    x.department_name, x.department_code, x.specialty_name, x.specialty_code, x.cost_center_name, x.cost_center_code,
    x.company_id, x.lob_id, x.department_id, x.specialty_id, x.cost_center_id

    --need to convert ovearl time to hours

    --fractional value

    from date_cuts as dx 
    inner join appointment_effort_start_end as x on
        (  COALESCE(x.appointment_start_date, '0001-01-01'::DATE) <= dx.end_cut )
        AND
        (  dx.start_cut <= COALESCE(x.appointment_end_date, '9999-12-31'::DATE) )
    WHERE   
            (  dx.start_cut <= COALESCE(x.effective_end_date::date, '9999-12-31'::DATE )  )
            AND (  x.effective_begin_date::date <= dx.end_cut )
    ORDER BY x.appointment_id, dx.start_cut
)


SELECT 
    appointment_effort_id::bigint, appointment_id::bigint,
    appointment_start_date::date, appointment_end_date::date,
    start_cut::date, end_cut::date, effective_begin_date::date, effective_end_date::date,
    active_start::date, active_end::date, active_days::integer, total_period_days::integer,
    percent_days::numeric,
    --normalization
    CASE WHEN percent_days = 1 THEN cfte
    ELSE cfte*percent_days END as cfte,

    CASE WHEN percent_days = 1 THEN veterans_affairs
    ELSE veterans_affairs*percent_days END as veterans_affairs,

    CASE WHEN percent_days = 1 THEN academic
    ELSE academic*percent_days END as academic,

    CASE WHEN percent_days = 1 THEN administration
    ELSE administration*percent_days END as administration,

    CASE WHEN percent_days = 1 THEN contract
    ELSE contract*percent_days END as contract,

    CASE WHEN percent_days = 1 THEN full_effort
    ELSE full_effort*percent_days END as full_effort,

    CASE WHEN percent_days = 1 THEN cfte_time
    ELSE cfte_time*percent_days END as cfte_time,

    CASE WHEN percent_days = 1 THEN cfte_time_hrs
    ELSE cfte_time_hrs*percent_days END as cfte_time_hrs,

    cfte_full_time, time_unit_name, cfte_full_time_hrs,

    provider_id, npi, employee_number, company_name, company_code, lob_name, lob_code,
    department_name, department_code, specialty_name, specialty_code, cost_center_name, cost_center_code,
    company_id, lob_id, department_id, specialty_id, cost_center_id
FROM appointment_effort_cuts;
-- $$